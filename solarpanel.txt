#include <Servo.h>

Servo servohori;
int servoh = 110;
int servohLimitHigh = 160;
int servohLimitLow = 60;

Servo servoverti; 
int servov = 110; 
int servovLimitHigh = 160; 
int servovLimitLow = 60;

// zdefiniowanie zmiennych oznaczających numery wyprowadzeń,
// do których są dołączone fotorezystory
int ldrtopl = 1; //top left 
int ldrtopr = 2; //top right 
int ldrbotl = 4; // bottom left 
int ldrbotr = 3; // bottom right 

// fukcja inicjalizująca działanie układu Arduino
// funkcja zawiera sekwencję operacji wykonywanych w programie jednorazowo
 void setup () 
 {
  servohori.write(110);  // ustalenie początkowej pozycji serwomechanizmu pracującego w poziomie
  servoverti.write(110); // ustalenie początkowej pozycji serwomechanizmu pracującego w pionie
  servohori.attach(11); // przypisanie do wyprowadzenia 11 układu Arduino sygnału sterującego serwomechanizmem działającym w poziomie
  servoverti.attach(10);// przypisanie do wyprowadzenia 11 układu Arduino sygnału sterującego serwomechanizmem działającym w pionie
  Serial.begin(9600);   // ustawienie parametrów działania portu szeregowego układu Arduino
  delay(500);
// opóźnienie przed rozpoczęciem działania cyklicznej części programu  
 }
// funkcja zawierająca powtarzalne elementy programu
void loop()
{
  servoh = servohori.read();
  servov = servoverti.read();

// odczyt  wartości analogowych (wartość napięcia proporcjonalna do oświetlenia odpowiedniego fotorezystora)
 int TopLeft = analogRead(ldrtopl);
 int TopRight = analogRead(ldrtopr);
 int BottomLeft = analogRead(ldrbotl);
 int BottomRight = analogRead(ldrbotr);
   //średnia wartości sygnałów fotorezystorów górnego rzędu
   double AverageTop = (TopLeft + TopRight) / 2.0;
  //średnia wartości sygnałów fotorezystorów dolnego rzędu
  double AverageBot = (BottomLeft + BottomRight) / 2.0;
  //średnia wartości sygnałów fotorezystorów lewej kolumny
  double AverageLeft = (BottomLeft + TopLeft) / 2.0;
 //średnia wartości sygnałów fotorezystorów prawej kolumny
 double AverageRight = (BottomRight + TopRight) / 2.0;
  // wyświetlenie wartości sygnałów odczytanych z wejść analogowych, do których są dołączone fotorezystory
  Serial.println("TOP LEFT");
  Serial.println(TopLeft);
   Serial.println("TOP RIGHT");
  Serial.println(TopRight);
  Serial.println("BOTTOM LEFT");
  Serial.println(BottomLeft);
  Serial.println("BOTTOM RIGHT");
  Serial.println(BottomRight);
  // wyświetlenie wartości sygnałów odczytanych z wejść analogowych, kreślarka
 
  // główny program sterowanie
   
  // porównanie średniej sygnałów fotorezystorów górnego i dolnego rzędu odpowiada za sterowanie osią elewacji (pion)
  if(AverageTop > AverageBot)
  {
    if(servov < servovLimitLow)
    {
      servov = servovLimitLow;
    }
    servoverti.write(servov +1);
    delay(100); 
  }
  else if(AverageTop < AverageBot)
  {
     if(servov > servovLimitHigh)
    {
      servov = servovLimitHigh;
    }
    servoverti.write(servov -1);
    delay(100); 
  }
  else
  {
    servoverti.write(servov);
    delay(100);
  }
  
  /*{
    servoverti.write(servov +1);  // wartośc poprzednia plus 1 i wysłanie jej na serwo
      // jeżeli wartość sygnału sterującego serwomechnizmem jest poniżej dolnego ograniczenia
    // ustawienie wartosći sygnału sterującego serwomechnizmem na poziomie dolnego ograniczenia
  }
  // porównanie średniej sygnałów fotorezystorów górnego i dolnego rzędu odpowiada za sterowanie osią elewacji (pion)
  {
    servoverti.write(servov -1);
  // jeżeli wartość sygnału sterującego serwomechnizmem jest poniżej dolnego ograniczenia
   // ustawienie wartosći sygnału sterującego serwomechnizmem na poziomie dolnego ograniczenia
    delay(10);                  // opóżnienie umożliwiające osiągnięcie przez serwomechanizm zadanaj pozycji
    servoverti.write(servov);    //zmiana sygnalu sterującego serwomechanizmu
  }*/
   // porównanie średniej sygnałów fotorezystorów lewej i prawej kolumny odpowiada za sterowanie osią azymutu (poziom)4
   
   if(AverageLeft > AverageRight)
  {
    if(servoh < servohLimitLow)
    {
      servoh = servohLimitLow;
    }
    servohori.write(servoh +1);
    delay(100); 
  }
  else if(AverageLeft < AverageRight)
  {
     if(servoh > servohLimitHigh)
    {
      servoh = servohLimitHigh;
    }
    servohori.write(servoh -1);
    delay(100); 
  }
  else
  {
    servohori.write(servoh);
    delay(100);
  }
   
  /*{
    servohori.write(servoh +1);      // ruch w górę
    servohori.write(servoh);    //zmiana sygnalu sterującego serwomechanizmu
  }*/
  //delay(2000);
}
